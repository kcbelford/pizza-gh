{"remainingRequest":"/Users/kbelford/Desktop/300/code/html300/lesson07/assignment/assignment-7/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/kbelford/Desktop/300/code/html300/lesson07/assignment/assignment-7/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kbelford/Desktop/300/code/html300/lesson07/assignment/assignment-7/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kbelford/Desktop/300/code/html300/lesson07/assignment/assignment-7/src/components/History.vue?vue&type=template&id=aa4ea6d8&scoped=true&lang=html&","dependencies":[{"path":"/Users/kbelford/Desktop/300/code/html300/lesson07/assignment/assignment-7/src/components/History.vue","mtime":1592522382588},{"path":"/Users/kbelford/Desktop/300/code/html300/lesson07/assignment/assignment-7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kbelford/Desktop/300/code/html300/lesson07/assignment/assignment-7/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kbelford/Desktop/300/code/html300/lesson07/assignment/assignment-7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kbelford/Desktop/300/code/html300/lesson07/assignment/assignment-7/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}